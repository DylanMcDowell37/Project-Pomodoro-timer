{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mcdow\\\\Desktop\\\\Projects\\\\Project-Pomodoro-timer\\\\src\\\\pomodoro\\\\Pomodoro.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusButton from \"./FocusButton\";\nimport StartStop from \"./StartStop\";\nimport Timer from \"./Timer\";\nimport Progress from \"./Progress\";\nimport BreakButton from \"./BreakButton\";\n/**\r\n * A component representing a Pomodoro timer.\r\n * @returns {JSX} A <div> element containing all other components.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Pomodoro() {\n  _s();\n\n  const initDuration = {\n    focusMax: 60 * 25,\n    //25min focus intial set time.\n    focusLeft: 60 * 25,\n    focusFloor: 60 * 5,\n    //5min focus minimum time allowed\n    focusRoof: 60 * 60,\n    //60min focus maximum time allowed\n    breakMax: 60 * 5,\n    //5min break inital set time\n    breakLeft: 60 * 5,\n    breakFloor: 60 * 1,\n    // 1min break minimum time allowed\n    breakRoof: 60 * 15,\n    // 15min break maximum time allowed\n    isTimerRunning: false,\n    focus: true,\n    sessionStarted: false\n  };\n  const [duration, setDuration] = useState({ ...initDuration\n  }); // useInterval is called every second when the timer is on\n\n  useInterval(() => {\n    if (duration.focusLeft <= 0 || duration.breakLeft <= 0) {\n      const alarm = new Audio(`https://onlineclock.net/audio/options/default.mp3`).play();\n      console.log(alarm);\n      switchModes();\n    } else {\n      if (duration.focus) timePassed(\"focusLeft\");else timePassed(\"breakLeft\");\n    }\n  }, duration.isTimerRunning ? 1000 : null);\n  /**\r\n   * If a second has passed, appropriately decrease second on timer.\r\n   * @param {string} mode - Either \"focusLeft\" or \"breakLeft\".\r\n   */\n\n  function timePassed(mode) {\n    setDuration(() => {\n      return { ...duration,\n        [mode]: duration[mode] - 1\n      };\n    });\n  }\n  /**\r\n   * Once focus/break ends, switch modes and reset timers.\r\n   */\n\n\n  function switchModes() {\n    setDuration(() => {\n      return { ...duration,\n        focusLeft: duration.focusMax,\n        breakLeft: duration.breakMax,\n        focus: !duration.focus\n      };\n    });\n  }\n  /**\r\n   * Adds an extra \"0\" to single-digit numbers.\r\n   * @param {number} num - The number to pad.\r\n   * @returns {number} - The padded number, if padded at all.\r\n   */\n\n\n  function pad(num) {\n    return num < 10 ? \"0\" + num : num;\n  }\n  /**\r\n   * Gives a time formatted in mm:ss.\r\n   * @param {string} mode Four possibilities: focusMax, focusLeft, breakMax, breakLeft \r\n   */\n\n\n  function getTime(mode) {\n    return `${pad(Math.floor(duration[mode] / 60))}:${pad(duration[mode] % 60)}`;\n  }\n  /**\r\n   * Gives a key of the timer object.\r\n   * @param {string} key The key of the timer object.\r\n   */\n\n\n  function get(key) {\n    return duration[key];\n  }\n  /**\r\n   * Increments/decrements max of focus/break.\r\n   * @param {string} mode - Either \"focus\" or \"break\".\r\n   * @param {number} change - Amount to change max by.\r\n   */\n\n\n  function changeMax(mode, change) {\n    const newTime = change < 0 ? Math.max(duration[mode + \"Floor\"], duration[mode + \"Max\"] + change) : Math.min(duration[mode + \"Roof\"], duration[mode + \"Max\"] + change);\n    setDuration(() => {\n      return { ...duration,\n        [mode + \"Max\"]: newTime,\n        [mode + \"Left\"]: newTime\n      };\n    });\n  }\n  /**\r\n   * Plays/pauses the timer.\r\n   */\n\n\n  function playPause() {\n    setDuration(() => {\n      return { ...duration,\n        isTimerRunning: !duration.isTimerRunning,\n        sessionStarted: true\n      };\n    });\n  }\n  /**\r\n   * Stops the timer, resetting it.\r\n   */\n\n\n  function stop() {\n    setDuration(() => {\n      return { ...duration,\n        isTimerRunning: false,\n        sessionStarted: false,\n        focusLeft: duration.focusMax,\n        breakLeft: duration.breakMax,\n        focus: true\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pomodoro\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(FocusButton, {\n          changeMax: changeMax,\n          getTime: getTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"float-right\",\n          children: /*#__PURE__*/_jsxDEV(BreakButton, {\n            changeMax: changeMax,\n            getTime: getTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(StartStop, {\n      playPause: playPause,\n      get: get,\n      stop: stop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      getTime: getTime,\n      get: get\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Progress, {\n      get: get\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Pomodoro, \"6UlL7lqR69fjMaHVYb+BirqBjSU=\", false, function () {\n  return [useInterval];\n});\n\n_c = Pomodoro;\nexport default Pomodoro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pomodoro\");","map":{"version":3,"names":["React","useState","useInterval","FocusButton","StartStop","Timer","Progress","BreakButton","Pomodoro","initDuration","focusMax","focusLeft","focusFloor","focusRoof","breakMax","breakLeft","breakFloor","breakRoof","isTimerRunning","focus","sessionStarted","duration","setDuration","alarm","Audio","play","console","log","switchModes","timePassed","mode","pad","num","getTime","Math","floor","get","key","changeMax","change","newTime","max","min","playPause","stop"],"sources":["C:/Users/mcdow/Desktop/Projects/Project-Pomodoro-timer/src/pomodoro/Pomodoro.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport FocusButton from \"./FocusButton\";\r\nimport StartStop from \"./StartStop\";\r\nimport Timer from \"./Timer\";\r\nimport Progress from \"./Progress\";\r\nimport BreakButton from \"./BreakButton\";\r\n\r\n/**\r\n * A component representing a Pomodoro timer.\r\n * @returns {JSX} A <div> element containing all other components.\r\n */\r\n\r\nfunction Pomodoro() {\r\n  const initDuration = {\r\n\t\tfocusMax: 60 * 25, //25min focus intial set time.\r\n\t\tfocusLeft: 60 * 25, \r\n\t\tfocusFloor: 60 * 5, //5min focus minimum time allowed\r\n\t\tfocusRoof: 60 * 60, //60min focus maximum time allowed\r\n\r\n\t\tbreakMax: 60 * 5, //5min break inital set time\r\n\t\tbreakLeft: 60 * 5,\r\n\t\tbreakFloor: 60 * 1, // 1min break minimum time allowed\r\n\t\tbreakRoof: 60 * 15, // 15min break maximum time allowed\r\n\r\n\t\tisTimerRunning: false,\r\n\t\tfocus: true,\r\n\t\tsessionStarted: false,\r\n\t};\r\n  const [duration, setDuration] = useState({...initDuration});\r\n\r\n  // useInterval is called every second when the timer is on\r\n\tuseInterval(\r\n    () => {\r\n\t\t\tif(duration.focusLeft <= 0 || duration.breakLeft <= 0) {\r\n\t\t\t\tconst alarm = new Audio(`https://onlineclock.net/audio/options/default.mp3`).play();\r\n\t\t\t\tconsole.log(alarm);\r\n\t\t\t\tswitchModes();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(duration.focus)\r\n\t\t\t\t\ttimePassed(\"focusLeft\");\r\n\t\t\t\telse\r\n\t\t\t\t\ttimePassed(\"breakLeft\");\t\r\n\t\t\t}\r\n    },\r\n    duration.isTimerRunning ? 1000 : null\r\n  );\r\n\r\n\t/**\r\n\t * If a second has passed, appropriately decrease second on timer.\r\n\t * @param {string} mode - Either \"focusLeft\" or \"breakLeft\".\r\n\t */\r\n\tfunction timePassed(mode) {\r\n\t\tsetDuration(() => {\r\n\t\t\treturn {\r\n\t\t\t\t...duration,\r\n\t\t\t\t[mode]: duration[mode] - 1,\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Once focus/break ends, switch modes and reset timers.\r\n\t */\r\n\tfunction switchModes() {\r\n\t\tsetDuration(() => {\r\n\t\t\treturn {\r\n\t\t\t\t...duration, \r\n\t\t\t\tfocusLeft: duration.focusMax,\r\n\t\t\t\tbreakLeft: duration.breakMax,\r\n\t\t\t\tfocus: !duration.focus,\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an extra \"0\" to single-digit numbers.\r\n\t * @param {number} num - The number to pad.\r\n\t * @returns {number} - The padded number, if padded at all.\r\n\t */\r\n\tfunction pad(num) {\r\n\t\treturn num < 10 ? \"0\" + num : num;\r\n\t}\r\n\r\n\t/**\r\n\t * Gives a time formatted in mm:ss.\r\n\t * @param {string} mode Four possibilities: focusMax, focusLeft, breakMax, breakLeft \r\n\t */\r\n\tfunction getTime(mode) {\r\n\t\treturn `${ pad(Math.floor(duration[mode] / 60)) }:${ pad(duration[mode] % 60) }`;\r\n\t}\r\n\r\n\t/**\r\n\t * Gives a key of the timer object.\r\n\t * @param {string} key The key of the timer object.\r\n\t */\r\n\tfunction get(key) {\r\n\t\treturn duration[key];\r\n\t}\r\n\r\n\t/**\r\n\t * Increments/decrements max of focus/break.\r\n\t * @param {string} mode - Either \"focus\" or \"break\".\r\n\t * @param {number} change - Amount to change max by.\r\n\t */\r\n\tfunction changeMax(mode, change) {\r\n\t\tconst newTime = change < 0\r\n\t\t\t? Math.max(duration[mode + \"Floor\"], duration[mode + \"Max\"] + change)\r\n\t\t\t: Math.min(duration[mode + \"Roof\"], duration[mode + \"Max\"] + change);\r\n\r\n\t\tsetDuration(() => {\r\n\t\t\treturn {\r\n\t\t\t\t...duration,\r\n\t\t\t\t[mode + \"Max\"]: newTime,\r\n\t\t\t\t[mode + \"Left\"]: newTime,\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Plays/pauses the timer.\r\n\t */\r\n  function playPause() {\r\n    setDuration(() => {\r\n\t\t\treturn {\r\n\t\t\t\t...duration, \r\n\t\t\t\tisTimerRunning: !duration.isTimerRunning,\r\n\t\t\t\tsessionStarted: true,\r\n\t\t\t};\r\n\t\t});\r\n  }\r\n\r\n\t/**\r\n\t * Stops the timer, resetting it.\r\n\t */\r\n\tfunction stop() {\r\n\t\tsetDuration(() => {\r\n\t\t\treturn {\r\n\t\t\t\t...duration,\r\n\t\t\t\tisTimerRunning: false,\r\n\t\t\t\tsessionStarted: false,\r\n\t\t\t\tfocusLeft: duration.focusMax,\r\n\t\t\t\tbreakLeft: duration.breakMax,\r\n\t\t\t\tfocus: true,\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n  return (\r\n    <div className=\"pomodoro\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<FocusButton\r\n\t\t\t\t\t\tchangeMax={changeMax}\r\n\t\t\t\t\t\tgetTime={getTime}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<div className=\"float-right\">\r\n\t\t\t\t\t\t<BreakButton\r\n\t\t\t\t\t\t\tchangeMax={changeMax}\r\n\t\t\t\t\t\t\tgetTime={getTime}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n      <StartStop \r\n\t\t\t\tplayPause={playPause}\r\n\t\t\t\tget={get}\r\n\t\t\t\tstop={stop}\r\n\t\t\t/>\r\n\r\n\t\t\t<Timer \r\n\t\t\t\tgetTime={getTime}\r\n\t\t\t\tget={get}\r\n\t\t\t/>\r\n\r\n\t\t\t<Progress\r\n\t\t\t\tget={get}\r\n\t\t\t/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}