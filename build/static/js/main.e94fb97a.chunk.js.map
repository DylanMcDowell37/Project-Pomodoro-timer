{"version":3,"sources":["pomodoro/FocusButton.js","pomodoro/StartStop.js","utils/class-names/index.js","pomodoro/Timer.js","pomodoro/Progress.js","pomodoro/BreakButton.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["FocusButton","changeMax","getTime","className","data-testid","type","onClick","event","target","dataset","testid","console","log","StartStop","classNameToBoolean","playPause","get","stop","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","disabled","Timer","currMode","Progress","time","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","BreakButton","Pomodoro","useState","focusMax","focusLeft","focusFloor","focusRoof","breakMax","breakLeft","breakFloor","breakRoof","isTimerRunning","focus","sessionStarted","duration","setDuration","timePassed","mode","pad","num","Math","floor","key","change","newTime","max","min","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","alarm","Audio","play","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e94fb97a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n/**\r\n * A component which allows the user to see and edit the focus/break max times.\r\n * @param {Object} props - The properties passed on to this component.\r\n * @param {function} props.changeMax - A function that changes the max time.\r\n * @param {function} props.getTime - A function that gives a time in mm:ss.\r\n * @returns {JSX} - A <div> element containing timer info and buttons.\r\n */\r\n\r\nfunction FocusButton( {changeMax, getTime} ) {\r\n\t/**\r\n\t * Handles changing the max of focus.\r\n\t * @param {Event} - Button event.\r\n\t */\r\n\tfunction handleFocusIncreaseChange(event) {\r\n\t\tswitch(event.target.dataset.testid) {\r\n\t\t\tcase \"increase-focus\": changeMax(\"focus\", 60*5); break;\r\n\t\t\tdefault: console.log(\"Something went wrong! @handleFocusIncreaseChange\"); break;\r\n\t\t}\r\n\t}\r\n\r\n  function handleFocusDecreaseChange(event){\r\n        switch(event.target.dataset.testid) {\r\n            case \"decrease-focus\": changeMax(\"focus\", 60*-5); break;\r\n            default: console.log(\"Something went wrong! @handleFocusDecreaseChange\"); break;\r\n        }\r\n    }\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t\t<div className=\"col\">\r\n\t\t\t\t<div className=\"input-group input-group-lg mb-2\">\r\n\t\t\t\t\t<span className=\"input-group-text\" data-testid={`duration-focus`}>\r\n\t\t\t\t\t{`Focus Duration: ${getTime(`focusMax`)}`}\r\n\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t<div className=\"input-group-append\">\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\tdata-testid={`decrease-focus`}\r\n\t\t\t\t\t\t\tonClick={handleFocusDecreaseChange}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span className=\"oi oi-minus\" />\r\n\t\t\t\t\t\t</button>\r\n\t\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\tdata-testid={`increase-focus`}\r\n\t\t\t\t\t\t\tonClick={handleFocusIncreaseChange}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span className=\"oi oi-plus\" />\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nFocusButton.propTypes = {\r\n\tchangeMax: PropTypes.func.isRequired,\r\n\tgetTime: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FocusButton;","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Two buttons that control play, pause, and stopping the timer.\r\n * @param {Object} props - The properties passed on to this component.\r\n * @param {function} props.playPause - Turns the timer on/off.\r\n * @param {function} props.get - Gets a key of the timer object.\r\n * @param {function} props.stop - Stops the timer and resets the time left.\r\n * @returns {JSX} - A <div> element containing two buttons.\r\n */\r\nfunction StartStop( {playPause, get, stop} ) {\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n      <div className=\"col\">\r\n        <div\r\n          className=\"btn-group btn-group-lg mb-2\"\r\n          role=\"group\"\r\n          aria-label=\"Timer controls\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-testid=\"play-pause\"\r\n            title=\"Start or pause timer\"\r\n            onClick={playPause}\r\n          >\r\n            <span\r\n              className={classNames({\r\n                oi: true,\r\n                \"oi-media-play\": !get(\"isTimerRunning\"),\r\n                \"oi-media-pause\": get(\"isTimerRunning\"),\r\n              })}\r\n            />\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"stop\"\r\n            title=\"Stop the session\"\r\n\t\t\t\t\t\tonClick={stop}\r\n\t\t\t\t\t\tdisabled={!get(\"isTimerRunning\")}\r\n          >\r\n            <span className=\"oi oi-media-stop\" />\r\n           </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\t);\r\n}\r\n\r\nStartStop.propTypes = {\r\n\tplayPause: PropTypes.func.isRequired,\r\n\tget: PropTypes.func.isRequired,\r\n\tstop: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default StartStop;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A component that shows the time remaining when the timer is on.\r\n * @param {Object} props - The properties passed on to this component.\r\n * @param {getTime} props.getTime - A function that gives a time in mm:ss.\r\n * @param {get} props.get - Gets a key of the timer object.\r\n * @returns {JSX} - A <div> element containing information about the timer.\r\n */\r\nfunction Timer( {getTime, get} ) {\r\n\tif(!get(\"sessionStarted\")) return null;\r\n\r\n\tconst currMode = get(\"focus\") ? \"focus\" : \"break\";\r\n\t\r\n\treturn (\r\n\t\t<div className=\"row mb-2\">\r\n\t\t\t<div className=\"col\">\r\n\t\t\t\t<h2 data-testid=\"session-title\">\r\n\t\t\t\t\t{get(\"focus\") ? \"Focusing \" : \"On Break \"}\r\n\t\t\t\t\tfor {getTime(`${currMode}Max`)} minutes\r\n\t\t\t\t</h2>\r\n\t\t\t\t<p className=\"lead\" data-testid=\"session-sub-title\">\r\n\t\t\t\t\t{getTime(`${currMode}Left`)} remaining\r\n\t\t\t\t</p>\r\n\t\t\t\t<h3>{!get(\"isTimerRunning\") ? \"PAUSED\" : \"\"}</h3>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nTimer.propTypes = {\r\n\tget: PropTypes.func.isRequired,\r\n\tgetTime: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Timer;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A component that shows a progress bar when the timer is on.\r\n * @param {Object} props - The properties passed on to this component.\r\n * @param {get} props.get - Gets a key of the timer object.\r\n * @returns {JSX} - A <div> element containing a progress bar.\r\n */\r\nfunction Progress({ get }) {\r\n\tif(!get(\"sessionStarted\")) return null;\r\n\r\n\tconst currMode = get(\"focus\") ? \"focus\" : \"break\";\r\n\tconst time = 100 - (100 * (get(`${currMode}Left`) / get(`${currMode}Max`)));\r\n\r\n\treturn (\r\n\t\t<div className=\"row mb-2\">\r\n\t\t\t<div className=\"col\">\r\n\t\t\t\t<div className=\"progress\" style={{ height: \"20px\" }}>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"progress-bar\"\r\n\t\t\t\t\t\trole=\"progressbar\"\r\n\t\t\t\t\t\taria-valuemin=\"0\"\r\n\t\t\t\t\t\taria-valuemax=\"100\"\r\n\t\t\t\t\t\taria-valuenow={time}\r\n\t\t\t\t\t\tstyle={{ width: `${time}%` }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nProgress.propTypes = {\r\n\tget: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Progress;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n/**\r\n * A component which allows the user to see and edit the focus/break max times.\r\n * @param {Object} props - The properties passed on to this component.\r\n * @param {function} props.changeMax - A function that changes the max time.\r\n * @param {function} props.getTime - A function that gives a time in mm:ss.\r\n * @returns {JSX} - A <div> element containing timer info and buttons.\r\n */\r\n\r\nfunction BreakButton( {changeMax, getTime} ) {\r\n\t/**\r\n\t * Handles changing the max of break.\r\n\t * @param {Event} - Button event.\r\n\t */\r\n\r\n\tfunction handleBreakIncreaseChange(event){\r\n\tswitch(event.target.dataset.testid) {\r\n\t\tcase \"increase-break\": changeMax(\"break\", 60*1); break;\r\n\t\tdefault: console.log(\"Something went wrong! @handleBreakIncreaseChange\"); break;\r\n\t}\r\n}\r\n \r\n\tfunction handleBreakDecreaseChange(event){\r\n        switch(event.target.dataset.testid) {\r\n            case \"decrease-break\": changeMax(\"break\", 60*-1); break;\r\n            default: console.log(\"Something went wrong! @handleBreakDecreaseChange\"); break;\r\n        }\r\n    }\r\n\r\n\r\n\treturn (\r\n\t\t\t<div className=\"col\">\r\n\t\t\t\t<div className=\"input-group input-group-lg mb-2\">\r\n\t\t\t\t\t<span className=\"input-group-text\" data-testid={`duration-break`}>\r\n\t\t\t\t\t\t{`Break Duration: ${getTime(`breakMax`)}`}\r\n\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t<div className=\"input-group-append\">\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\tdata-testid={`decrease-break`}\r\n\t\t\t\t\t\t\tonClick={handleBreakDecreaseChange}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span className=\"oi oi-minus\" />\r\n\t\t\t\t\t\t</button>\r\n\t\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\tdata-testid={`increase-break`}\r\n\t\t\t\t\t\t\tonClick={handleBreakIncreaseChange}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span className=\"oi oi-plus\" />\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nBreakButton.propTypes = {\r\n\tchangeMax: PropTypes.func.isRequired,\r\n\tgetTime: PropTypes.func.isRequired\r\n};\r\n\r\nexport default BreakButton;","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusButton from \"./FocusButton\";\nimport StartStop from \"./StartStop\";\nimport Timer from \"./Timer\";\nimport Progress from \"./Progress\";\nimport BreakButton from \"./BreakButton\";\n\n/**\n * A component representing a Pomodoro timer.\n * @returns {JSX} A <div> element containing all other components.\n */\n\nfunction Pomodoro() {\n  const initDuration = {\n\t\tfocusMax: 60 * 25, //25min focus intial set time.\n\t\tfocusLeft: 60 * 25, \n\t\tfocusFloor: 60 * 5, //5min focus minimum time allowed\n\t\tfocusRoof: 60 * 60, //60min focus maximum time allowed\n\n\t\tbreakMax: 60 * 5, //5min break inital set time\n\t\tbreakLeft: 60 * 5,\n\t\tbreakFloor: 60 * 1, // 1min break minimum time allowed\n\t\tbreakRoof: 60 * 15, // 15min break maximum time allowed\n\n\t\tisTimerRunning: false,\n\t\tfocus: true,\n\t\tsessionStarted: false,\n\t};\n  const [duration, setDuration] = useState({...initDuration});\n\n  // useInterval is called every second when the timer is on\n\tuseInterval(\n    () => {\n\t\t\tif(duration.focusLeft <= 0 || duration.breakLeft <= 0) {\n\t\t\t\tconst alarm = new Audio(`https://onlineclock.net/audio/options/default.mp3`).play();\n\t\t\t\tconsole.log(alarm);\n\t\t\t\tswitchModes();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(duration.focus)\n\t\t\t\t\ttimePassed(\"focusLeft\");\n\t\t\t\telse\n\t\t\t\t\ttimePassed(\"breakLeft\");\t\n\t\t\t}\n    },\n    duration.isTimerRunning ? 1000 : null\n  );\n\n\t/**\n\t * If a second has passed, appropriately decrease second on timer.\n\t * @param {string} mode - Either \"focusLeft\" or \"breakLeft\".\n\t */\n\tfunction timePassed(mode) {\n\t\tsetDuration(() => {\n\t\t\treturn {\n\t\t\t\t...duration,\n\t\t\t\t[mode]: duration[mode] - 1,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Once focus/break ends, switch modes and reset timers.\n\t */\n\tfunction switchModes() {\n\t\tsetDuration(() => {\n\t\t\treturn {\n\t\t\t\t...duration, \n\t\t\t\tfocusLeft: duration.focusMax,\n\t\t\t\tbreakLeft: duration.breakMax,\n\t\t\t\tfocus: !duration.focus,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Adds an extra \"0\" to single-digit numbers.\n\t * @param {number} num - The number to pad.\n\t * @returns {number} - The padded number, if padded at all.\n\t */\n\tfunction pad(num) {\n\t\treturn num < 10 ? \"0\" + num : num;\n\t}\n\n\t/**\n\t * Gives a time formatted in mm:ss.\n\t * @param {string} mode Four possibilities: focusMax, focusLeft, breakMax, breakLeft \n\t */\n\tfunction getTime(mode) {\n\t\treturn `${ pad(Math.floor(duration[mode] / 60)) }:${ pad(duration[mode] % 60) }`;\n\t}\n\n\t/**\n\t * Gives a key of the timer object.\n\t * @param {string} key The key of the timer object.\n\t */\n\tfunction get(key) {\n\t\treturn duration[key];\n\t}\n\n\t/**\n\t * Increments/decrements max of focus/break.\n\t * @param {string} mode - Either \"focus\" or \"break\".\n\t * @param {number} change - Amount to change max by.\n\t */\n\tfunction changeMax(mode, change) {\n\t\tconst newTime = change < 0\n\t\t\t? Math.max(duration[mode + \"Floor\"], duration[mode + \"Max\"] + change)\n\t\t\t: Math.min(duration[mode + \"Roof\"], duration[mode + \"Max\"] + change);\n\n\t\tsetDuration(() => {\n\t\t\treturn {\n\t\t\t\t...duration,\n\t\t\t\t[mode + \"Max\"]: newTime,\n\t\t\t\t[mode + \"Left\"]: newTime,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Plays/pauses the timer.\n\t */\n  function playPause() {\n    setDuration(() => {\n\t\t\treturn {\n\t\t\t\t...duration, \n\t\t\t\tisTimerRunning: !duration.isTimerRunning,\n\t\t\t\tsessionStarted: true,\n\t\t\t};\n\t\t});\n  }\n\n\t/**\n\t * Stops the timer, resetting it.\n\t */\n\tfunction stop() {\n\t\tsetDuration(() => {\n\t\t\treturn {\n\t\t\t\t...duration,\n\t\t\t\tisTimerRunning: false,\n\t\t\t\tsessionStarted: false,\n\t\t\t\tfocusLeft: duration.focusMax,\n\t\t\t\tbreakLeft: duration.breakMax,\n\t\t\t\tfocus: true,\n\t\t\t};\n\t\t});\n\t}\n\n  return (\n    <div className=\"pomodoro\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col\">\n\t\t\t\t\t<FocusButton\n\t\t\t\t\t\tchangeMax={changeMax}\n\t\t\t\t\t\tgetTime={getTime}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col\">\n\t\t\t\t\t<div className=\"float-right\">\n\t\t\t\t\t\t<BreakButton\n\t\t\t\t\t\t\tchangeMax={changeMax}\n\t\t\t\t\t\t\tgetTime={getTime}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n      <StartStop \n\t\t\t\tplayPause={playPause}\n\t\t\t\tget={get}\n\t\t\t\tstop={stop}\n\t\t\t/>\n\n\t\t\t<Timer \n\t\t\t\tgetTime={getTime}\n\t\t\t\tget={get}\n\t\t\t/>\n\n\t\t\t<Progress\n\t\t\t\tget={get}\n\t\t\t/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}